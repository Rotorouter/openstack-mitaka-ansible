---
# Install and set up our SQL databases
# http://docs.openstack.org/mitaka/install-guide-ubuntu/environment-sql-database.html
#
- hosts: [controllers]
  remote_user: "{{ SYSADMIN_NAME }}"
  become: yes
  become_method: sudo
  vars_files:
    - vars/vars.yml
    - vars/passwords.yml
  tasks:
    - name: Install SQL DB Packages
      apt:
        name: "{{ item }}"
        update_cache: yes
        install_recommends: yes
      with_items: "{{ db_packages }}"
#    - name: Copy MariaDB Configfile Template
#      copy:
#        src: etc/mariadb.cnf.defaults
#        dest: /etc/mysql/mariadb.cnf
#        owner: root
#        group: root
#        mode: 0644
#        backup: yes
    - name: Copy MariaDB Openstack Configfile Template
      copy:
        src: etc/mysqld_openstack.cnf.defaults
        dest: /etc/mysql/conf.d/openstack.cnf
        owner: root
        group: root
        mode: 0644
        backup: yes

# Add our bind-address to /etc/mysql/conf.d/openstack.cnf
    - name: Update the MariaDB Openstack Configfile
      replace:
        dest: /etc/mysql/conf.d/openstack.cnf
        regexp: 'ANSIBLE_MGMT_IP'
        replace: "{{ ANSIBLE_MGMT_IP }}"
    - name: Restart mysql
      service: 
        name: mysql
        enabled: yes
        state: restarted

# Run the equivalent of sudo mysql_secure_installation
# Adapted from https://github.com/PCextreme/ansible-role-mariadb/blob/master/tasks/mysql_secure_installation.yml
# 
    - name: Set MariaDB root Password
      mysql_user:
        name: root
        host: "{{ item }}"
        password: "{{ DB_PASS }}"
        state: present
      with_items: "{{ DB_HOSTS }}"
    - name: Copy ~/.my.cnf
      copy:
        src: etc/mysql.my.cnf.defaults
        dest: /root/.my.cnf
        owner: root
        group: root
        mode: 0600
        backup: yes
    - name: Update /root/.my.cnf
      replace:
        dest: /root/.my.cnf
        regexp: 'DB_PASS'
        replace: "{{ DB_PASS }}"
    - name: Reload privilege tables
      command: 'mysql -ne "{{ item }}"'
      with_items:
        - FLUSH PRIVILEGES
      changed_when: False
    - name: Remove anonymous users
      mysql_user:
        name: ''
        state: absent
      changed_when: False
    - name: Disallow root login remotely
      command: 'mysql -ne "{{ item }}"'
      with_items:
        - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
      changed_when: False
    - name: Remove test database 
      mysql_db:
        name: test
        login_user: root
        login_password: "{{ DB_PASS }}"
        state: absent
    - name: Remove access to test database
      command: 'mysql -ne "{{ item }}"'
      with_items:
        - DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%'
      changed_when: False
      ignore_errors: True
    - name: Reload privilege tables
      command: 'mysql -ne "{{ item }}"'
      with_items:
        - FLUSH PRIVILEGES
      changed_when: False
...
